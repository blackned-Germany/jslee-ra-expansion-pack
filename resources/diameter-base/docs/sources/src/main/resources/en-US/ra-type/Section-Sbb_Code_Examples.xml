<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">%BOOK_ENTITIES;]>

<section id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>

	<para>Simple Client-Side Example that creates and sends an Accounting-Request and receives an Accounting-Answer.</para>
	
	<programlisting role="JAVA" langugage="Java">
	/* Method for creating and sending ACR with pre-defined values. */
	private void sendAccountingRequest() {
		try {
			AccountingClientSessionActivity activity = provider.createAccountingClientSessionActivity();

			List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();

			avps.add(avpFactory.createAvp(DiameterAvpCodes.SESSION_ID, 
				activity.getSessionId().getBytes()));

			DiameterAvp avpVendorId = avpFactory.createAvp(DiameterAvpCodes.VENDOR_ID, 193);
			DiameterAvp avpAcctApplicationId = avpFactory.createAvp(
				DiameterAvpCodes.ACCT_APPLICATION_ID, 19302);

			avps.add(avpFactory.createAvp(
				DiameterAvpCodes.VENDOR_SPECIFIC_APPLICATION_ID, 
					new DiameterAvp[] { avpVendorId, avpAcctApplicationId }));

			avps.add(avpFactory.createAvp(DiameterAvpCodes.ORIGIN_HOST, 
				this.originIP.getBytes()));
			avps.add(avpFactory.createAvp(DiameterAvpCodes.ORIGIN_REALM, 
				this.originRealm.getBytes()));

			avps.add(avpFactory.createAvp(DiameterAvpCodes.DESTINATION_HOST, 
				(this.destinationIP + ":" + this.destinationPort).getBytes()));
			avps.add(avpFactory.createAvp(DiameterAvpCodes.DESTINATION_REALM, 
				this.destinationRealm.getBytes()));

			// Subscription ID
			DiameterAvp subscriptionIdType = avpFactory.createAvp(193, 555, 0);
			DiameterAvp subscriptionIdData = avpFactory.createAvp(193, 554, "00001000");
			avps.add(avpFactory.createAvp(193, 553, new DiameterAvp[] {subscriptionIdType, 
				subscriptionIdData}));

			// Requested Service Unit
			DiameterAvp unitType = avpFactory.createAvp(193, 611, 2);
			DiameterAvp valueDigits = avpFactory.createAvp(193, 617, 10L);
			DiameterAvp unitValue = avpFactory.createAvp(193, 612, new DiameterAvp[] {valueDigits});
			avps.add(avpFactory.createAvp(193, 606, new DiameterAvp[] {unitType, unitValue}));

			// Record Number and Type
			avps.add(avpFactory.createAvp(
				DiameterAvpCodes.ACCOUNTING_RECORD_NUMBER, 0));
			avps.add(avpFactory.createAvp(
				DiameterAvpCodes.ACCOUNTING_RECORD_TYPE, 1));

			// Requested action
			avps.add(avpFactory.createAvp(193, 615, 0));

			// Service Parameter Type
			DiameterAvp serviceParameterType = avpFactory.createAvp(193, 608, 0);
			DiameterAvp serviceParameterValue = avpFactory.createAvp(193, 609, "510");
			avps.add(avpFactory.createAvp(193, 607, new DiameterAvp[] {serviceParameterType,
				serviceParameterValue}));

			// Service Parameter Type
			DiameterAvp serviceParameterType2 = avpFactory.createAvp(193, 608, 14);
			DiameterAvp serviceParameterValue2 = avpFactory.createAvp(193, 609, "20");
			avps.add(avpFactory.createAvp(193, 607, new DiameterAvp[] {serviceParameterType2,
				serviceParameterValue2}));

			DiameterAvp[] avpArray = new DiameterAvp[avps.size()];
			avpArray = avps.toArray(avpArray);

			if (tracer.isInfoEnabled())
				tracer.info("Creating Custom Message...");

			AccountingRequest acr = messageFactory.createAccountingRequest(avpArray);

			if (tracer.isFineEnabled()) {
				tracer.fine("Created Custom Message[" + acr + "]");
				tracer.fine("Sending Custom Message...");
			}
			
			ActivityContextInterface aci = acif.getActivityContextInterface(activity);
			
			activity.sendAccountRequest(acr);
			
			aci.attach(sbbContext.getSbbLocalObject());
			
			if (tracer.isInfoEnabled()) {
				tracer.info("Sent Custom Message[" + acr + "]");
			}
		}
		catch (Exception e) {
			tracer.severe("", e);
		}
	}
	
	...
	
	/* Method for handling ACA messages. Just print the Result-Code AVP. */
	public void onAccountingAnswer(AccountingAnswer aca, ActivityContextInterface aci) {
		if (tracer.isInfoEnabled()) {
			tracer.info("Accounting-Answer received. Result-Code[" + aca.getResultCode() + "].");
		}
	}
	</programlisting>
	
	<para>Simple Server-Side Example for receiving Accounting-Request and proxy it to it's destination, if acting as proxy, or answer with Accounting-Answer, if in Server mode.</para>
	
	<programlisting role="JAVA" langugage="Java">
	/* Method for handling ACR messages and either proxy or answer them. */
	public void onAccountingRequest(AccountingRequest acr, ActivityContextInterface aci) {
		long start = System.currentTimeMillis();
		if (tracer.isInfoEnabled())
			tracer.info("Accounting-Request received. [" + acr + "]");

		boolean actAsProxy = false;

		try {
			// Are we gonna act as a proxy?
			if (actAsProxy) {
				// In here we act as a "proxy". Just for testing we take the original message,
				// replace the Origin/Destination Host/Realm AVPs and send it to the emulator.

				boolean hasDestinationHost = false;
				boolean hasDestinationRealm = false;

				List&lt;DiameterAvp&gt; avps = new ArrayList&lt;DiameterAvp&gt;();

				for (DiameterAvp avp : acr.getAvps()) {
					switch (avp.getCode()) {
					case DiameterAvpCodes.ORIGIN_HOST:
						avps.add(avpFactory.createAvp(DiameterAvpCodes.ORIGIN_HOST, ("aaa://" + 
							originIP + ":" + originPort).getBytes()));
						break;
					case DiameterAvpCodes.ORIGIN_REALM:
						avps.add(avpFactory.createAvp(DiameterAvpCodes.ORIGIN_REALM, 
							originRealm.getBytes()));
						break;
					case DiameterAvpCodes.DESTINATION_HOST:
						avps.add(avpFactory.createAvp(DiameterAvpCodes.DESTINATION_HOST, 
							("aaa://" + destinationIP + ":" + destinationPort).getBytes()));
						hasDestinationHost = true;
						break;
					case DiameterAvpCodes.DESTINATION_REALM:
						avps.add(avpFactory.createAvp(DiameterAvpCodes.DESTINATION_REALM, 
							destinationRealm.getBytes()));
						hasDestinationRealm = true;
						break;
					default:
						avps.add(avp);
					}
				}

				if (!hasDestinationHost)
					avps.add(avpFactory.createAvp(DiameterAvpCodes.DESTINATION_HOST, 
						"127.0.0.1".getBytes()));

				if (!hasDestinationRealm)
					avps.add(avpFactory.createAvp(DiameterAvpCodes.DESTINATION_REALM, 
						"mobicents.org".getBytes()));
				if (tracer.isInfoEnabled())
					tracer.info("AVPs ==> " + avps);

				DiameterAvp[] avpArray = new DiameterAvp[avps.size()];
				avpArray = avps.toArray(avpArray);
				if (tracer.isInfoEnabled())
					tracer.info("Creating Custom Message...");
				DiameterMessage ms = messageFactory.createAccountingRequest(avpArray);
				if (tracer.isInfoEnabled()) {
					tracer.info("Created Custom Message[" + ms + "]");

					tracer.info("Sending Custom Message...");
				}
				provider.createActivity().sendMessage(ms);
				if (tracer.isInfoEnabled()) {
					tracer.info("Sent Custom Message[" + ms + "]");
				}
			}
			else {
				// In here we act as a server and just say it's SUCCESS.

				if (aci.getActivity() instanceof AccountingServerSessionActivity) {
					AccountingServerSessionActivity assa = 
						(AccountingServerSessionActivity) aci.getActivity();

					AccountingAnswer ans = assa.createAccountingAnswer(acr);
					ans.setResultCode(2001); // 2001 = SUCCESS

					if (tracer.isInfoEnabled()) {
						tracer.info("Sending Accounting-Answer [" + ans + "]");
					}

					assa.sendAccountingAnswer(ans);
					if (tracer.isInfoEnabled()) {
						tracer.info("Accounting-Answer sent.");
					}
				}
			}
		}
		catch (Exception e) {
			tracer.severe("", e);
		}

		long end = System.currentTimeMillis();

		if (tracer.isInfoEnabled()) {
			tracer.info("Accounting-Request proccessed. [" + (end - start) + "ms]");
		}
	}
	</programlisting>
</section>