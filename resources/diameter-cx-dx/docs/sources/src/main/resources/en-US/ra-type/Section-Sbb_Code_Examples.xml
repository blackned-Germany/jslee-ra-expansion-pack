<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [<!ENTITY % BOOK_ENTITIES SYSTEM "../User_Guide.ent">%BOOK_ENTITIES;]>

<section id="ratype_sbb_code_examples">

	<title>Sbb Code Examples</title>

	<para>Example <acronym>SBB</acronym> code to handle communication with <acronym>HSS</acronym> look as follows: </para>
	<programlisting role="JAVA" language="Java">
	public void onTimerEvent(TimerEvent event, ActivityContextInterface aci) {
		
		tracer.info("Diameter Cx/Dx example: Acting as client(ICSCF after REGISTER)");
		this.timerFacility.cancelTimer(event.getTimerID());

		// We are client - ICSCF, we get REGISTER from UE, instead of this timer methods
		// we should be in onRegister handler.
		DiameterIdentity destinationHost = new DiameterIdentity("aaa://" + 
			getProperty("destination.ip") + ":" + getProperty("destination.port"));
		DiameterIdentity destinationRealm = 
			new DiameterIdentity((String)getProperty("destination.realm"));

		CxDxClientSession clientSession;
		
		try {
			clientSession = this.provider.createCxDxClientSessionActivity(destinationHost,
				destinationRealm);
		
			ActivityContextInterface clientACI=this.acif.getActivityContextInterface(clientSession);
			clientACI.attach(this.sbbContext.getSbbLocalObject());
		
			UserAuthorizationRequest UAR = clientSession.createUserAuthorizationRequest();
			// &lt; User-Authorization-Request&gt; ::= &lt; Diameter Header: 300, REQ, PXY, 16777216 &gt;
			//			&lt; Session-Id &gt;
			//			{ Vendor-Specific-Application-Id }
			//			{ Auth-Session-State }
			UAR.setAuthSessionState(AuthSessionStateType.STATE_MAINTAINED);
			//			{ Origin-Host }
			//			{ Origin-Realm }
			//			[ Destination-Host ]
			//   		{ Destination-Realm }
			//			{ User-Name }
			UAR.setUserName("adam.b");
			//			*[ Supported-Features ]
			//			{ Public-Identity }
			UAR.setPublicIdentity("sip:adam.b@travel.contanct.com");
			//			{ Visited-Network-Identifier }
			UAR.setVisitedNetworkIdentifier("visit.airport.moscow.ru");
			//			[ User-Authorization-Type ]
			UAR.setUserAuthorizationType(UserAuthorizationType.DE_REGISTRATION);
			//			[ UAR-Flags ]
		
			//			*[ AVP ]
			//			*[ Proxy-Info ]
			//			*[ Route-Record ]	
		
			// Send the message
			tracer.info("Diameter Cx/Dx example: Sending UAR:\n"+UAR);
			clientSession.sendUserAuthorizationRequest(UAR);
			tracer.info("Diameter Cx/Dx example: Sent UAR:\n"+UAR);
		}
		catch (CreateActivityException e) {
			tracer.severe("Unable to create Cx/Dx Client Session Activity.", e);
		}
		catch (IOException e) {
			tracer.severe("Failed to send Cx/Dx User-Authorization-Request.", e);
		}
	}
	
	...
	
	public void onUserAuthorizationAnswer(UserAuthorizationAnswer event, 
		ActivityContextInterface aci) {
		tracer.info("Diameter Cx/Dx example: receveid UAA:\n"+event);
		
		if(event.getResultCode() / 1000 != 2) {
			tracer.info("Diameter Cx/Dx example: receveid UAA with wrong result code:\n" + 
				event.getResultCode());
			return;
		}
		
		tracer.info("Diameter Cx/Dx example: Acting as SCSCF after receiving REGISTER from ICSCF");
		// HSS responded to our call, here we would forward REGISTER to S-CSCF, 
		// however lets not do that, its easier to set up it like that
		// lets act as S-CSCF, which received REGISTER and sends SAR
		try{
			//Detach, this will die
			aci.detach(this.sbbContext.getSbbLocalObject());
			DiameterIdentity destinationHost = new DiameterIdentity("aaa://" + 
				getProperty("destination.ip") + ":" + getProperty("destination.port"));
			DiameterIdentity destinationRealm = 
				new DiameterIdentity((String)getProperty("destination.realm"));
			
			//create SAR/SAA activity
			CxDxClientSession clientSession = this.provider.
				createCxDxClientSessionActivity(destinationHost, destinationRealm);
			ActivityContextInterface clientACI = this.acif.
				getActivityContextInterface(clientSession);
			clientACI.attach(this.sbbContext.getSbbLocalObject());
			ServerAssignmentRequest SAR = clientSession.createServerAssignmentRequest();

			// &lt;Server-Assignment-Request&gt; ::= &lt; Diameter Header: 301, REQ, PXY, 16777216 &gt;
			//		&lt; Session-Id &gt;
			//		{ Vendor-Specific-Application-Id }
			//		{ Auth-Session-State }
			SAR.setAuthSessionState(AuthSessionStateType.STATE_MAINTAINED);
			//		{ Origin-Host }
			//		{ Origin-Realm }
			//		[ Destination-Host ]
			//		{ Destination-Realm }
			//		[ User-Name ]
			SAR.setUserName("adam.b");
			//		*[ Supported-Features ]
			//		*[ Public-Identity ]
			SAR.setPublicIdentity("sip:adam.b@travel.contanct.com");
			//		[ Wildcarded-PSI ]
			//		[ Wildcarded-IMPU ]
			//		{ Server-Name }
			SAR.setServerName("x123.s.cscf.local.domain.org");
			//		{ Server-Assignment-Type }
			SAR.setServerAssignmentType(ServerAssignmentType.USER_DEREGISTRATION);
			//		{ User-Data-Already-Available }
			SAR.setUserDataAlreadyAvailable(
				UserDataAlreadyAvailable.USER_DATA_NOT_AVAILABLE);
			//		[ SCSCF-Restoration-Info ]
			//		[ Multiple-Registration-Indication ]
			//		*[ AVP ]
			//		*[ Proxy-Info ]
			//		*[ Route-Record ]
		
			// Send the SAR.
			tracer.info("Diameter Cx/Dx example: Sending SAR:\n"+SAR);
			clientSession.sendServerAssignmentRequest(SAR);
			tracer.info("Diameter Cx/Dx example: Sent SAR:\n"+SAR);
		}
		catch (CreateActivityException e) {
			tracer.severe("Unable to create Cx/Dx Client Session Activity.", e);
		}
		catch (IOException e) {
			tracer.severe("Failed to send Cx/Dx User-Authorization-Request.", e);
		}
	}
	</programlisting>
</section>